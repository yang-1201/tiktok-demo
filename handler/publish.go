// Code generated by hertz generator.

package handler

import (
	"context"
	"fmt"
	"os"
	"strconv"
	"strings"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	//pb "go_tiktok_project/idl/pb"
	"go_tiktok_project/service"
	"path/filepath"
	"github.com/cloudwego/hertz/cmd/hz/util/logs"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
)

// 获得发布列表
func GetUserVideo(ctx context.Context, c *app.RequestContext) {
	path := c.Request.Path()
	logs.Info("req path: %s", path)

	// req := new(pb.DouyinUserRequest)
	// if err := c.BindAndValidate(&req); err != nil {
	// 	logs.Info("错误")
	// 	c.String(400, err.Error())
	// 	return
	// }
	// logs.Info("req: %s", req)
	//获取参数
	user := c.Query("user_id")
	logs.Info("user_id: %s", user)
	token := c.Query("token")
	logs.Info("token: %s", token)

	// 鉴权token
	// mysql.InitDB()
	// video_list, err := mysql.FindIDinVideo(b)
	video_user_id, err := strconv.ParseInt(user, 10, 64)
	if err != nil {
		logs.Errorf("转换user_id为int失败, error: " + err.Error())
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "获得用户发布视频失败",
			"video_list":  nil,
		})
		return
	}

	token_user_id, err := strconv.ParseInt(token, 10, 64)
	if err != nil {
		logs.Errorf("转换token为int失败, error: " + err.Error())
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "获得用户发布视频失败",
			"video_list":  nil,
		})
		return
	}

	// 鉴权token
	// mysql.InitDB()
	// video_list, err := mysql.FindIDinVideo(b)
	//获取用户发布列表
	video_list, err := service.GetUserVideo(video_user_id, token_user_id)
	if err != nil {
		logs.Errorf("service err, error: " + err.Error())
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "获得用户发布视频失败",
			"video_list":  nil,
		})
		return
	}

	//返回respose
	c.JSON(consts.StatusOK, video_list)
}

// 用户视频投稿
func PostUserVideo(ctx context.Context, c *app.RequestContext) {
	path := c.Request.Path()
	logs.Info("req path: %s", path)

	//获取post信息
	token, _ := c.GetPostForm("token") //认为是user_id
	// if err != nil {
	// 	logs.Error("获得token失败, error: " + err)
	// 	c.JSON(400, utils.H{
	// 		"status_code": 1,
	// 		"status_msg":  "发布视频失败",
	// 	})
	// 	return
	// }
	user_id, err := strconv.ParseInt(token, 10, 64)
	if err != nil {
		//logs.Errorf("转化user_id为int失败, error: "+ err)
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "1发布视频失败",
		})
		return
	}
	logs.Info("user_id: %s", user_id)

	title, _ := c.GetPostForm("title")
	logs.Info("title: %s", title)

	data, err := c.FormFile("data")
	if err != nil {
		panic(err)
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "2发布视频失败",
		})
		return
	}

	//利用文件名获得文件信息和文件路径
	filename := filepath.Base(data.Filename)
	fileInfo := strings.Split(filename, ".")
	filedir := fileInfo[0]
	filedata := fmt.Sprintf("uesr:%d  video:%s", user_id, filename)
	filedir = fmt.Sprintf("./video_data/%s/%s", token, filedir)
	logs.Info("file: %s", data.Filename)
	logs.Info("filedir: %s", filedir)

	//创建存储文件夹
	_, erByStat := os.Stat(filedir)
	if erByStat != nil {
		logs.Errorf("os stat %s error......%s", filedir, erByStat.Error())
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "3发布视频失败",
		})
		return
	}
	//该判断主要是部分文件权限问题导致os.Stat()出错,具体看业务启用
	//使用os.IsNotExist()判断为true,说明文件夹不存在
	if os.IsNotExist(erByStat) {
		logs.Info("%s is not exist", erByStat.Error())
		err := os.MkdirAll(filedir, 0777)
		if err != nil {
			logs.Error("创建文件夹错误 , error:" + err.Error())
			c.JSON(400, utils.H{
				"status_code": 1,
				"status_msg":  "4发布视频失败",
			})
			return
		} else {
			logs.Info("Create dir %s success!", filedir)
		}
	}

	//保存视频文件
	saveFile := filepath.Join(filedir, filename)
	logs.Info("filepath: %s", saveFile)
	if err := c.SaveUploadedFile(data, saveFile); err != nil {
		logs.Error("保存视频失败,error:" + err.Error())
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "5发布视频失败",
		})
		return
	}

	//service 保存视频数据到数据库
	err_service := service.PostUserVideo(user_id, title, saveFile, filedata)
	if err_service != nil {
		logs.Error("server error,error :", err_service.Error())
		c.JSON(400, utils.H{
			"status_code": 1,
			"status_msg":  "6发布视频失败",
		})
		return
	}

	//返回参数
	c.JSON(consts.StatusOK, utils.H{
		"status_code": 0,
		"status_msg":  "发布视频成功",
	})
}
